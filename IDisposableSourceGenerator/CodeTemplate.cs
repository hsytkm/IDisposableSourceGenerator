// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 16.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace IDisposableSourceGenerator
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class CodeTemplate : CodeTemplateBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("// <auto-generated>\r\n// THIS (.cs) FILE IS GENERATED BY IDISPOSABLEGENERATOR. DO " +
                    "NOT CHANGE IT.\r\n// </auto-generated>\r\n#nullable enable\r\n\r\n");
 if (!string.IsNullOrEmpty(Namespace)) { 
            this.Write("namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            this.Write("\r\n");
 } 
            this.Write("{\r\n    partial class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            this.Write(" : global::System.IDisposable\r\n    {\r\n        protected readonly ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CompositeDisposableTypeName));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CompositeDisposableFieldName));
            this.Write(" = new ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CompositeDisposableTypeName));
            this.Write("();\r\n        private bool _disposedValue;\r\n\r\n        // dispose unmanaged objects" +
                    " when Dispose() or finalizer is invoked.\r\n");
 if (HasFlag(IDisposableGeneratorOptions.DisposeUnmanagedObjectsMethod)) { 
            this.Write("        protected virtual partial void DisposeUnmanagedObjects();   // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ToFullName(IDisposableGeneratorOptions.DisposeUnmanagedObjectsMethod)));
            this.Write("\r\n");
 } else { 
            this.Write("        //protected virtual partial void DisposeUnmanagedObjects(); // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ToFullName(IDisposableGeneratorOptions.DisposeUnmanagedObjectsMethod)));
            this.Write("\r\n");
 } 
            this.Write("\r\n        // set large fields to null when Dispose() or finalizer is invoked.\r\n");
 if (HasFlag(IDisposableGeneratorOptions.SetLargeFieldsToNullMethod)) { 
            this.Write("        protected virtual partial void SetLargeFieldsToNull();      // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ToFullName(IDisposableGeneratorOptions.SetLargeFieldsToNullMethod)));
            this.Write("\r\n");
 } else { 
            this.Write("        //protected virtual partial void SetLargeFieldsToNull();    // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ToFullName(IDisposableGeneratorOptions.SetLargeFieldsToNullMethod)));
            this.Write("\r\n");
 } 
            this.Write("\r\n        // called on disposing the managed objects.\r\n");
 if (HasFlag(IDisposableGeneratorOptions.OnDisposingMethod)) { 
            this.Write("        protected virtual partial void OnDisposing();               // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ToFullName(IDisposableGeneratorOptions.OnDisposingMethod)));
            this.Write("\r\n");
 } else { 
            this.Write("        //protected virtual partial void OnDisposing();             // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ToFullName(IDisposableGeneratorOptions.OnDisposingMethod)));
            this.Write("\r\n");
 } 
            this.Write("\r\n        protected virtual void Dispose(bool disposing)\r\n        {\r\n            " +
                    "if (_disposedValue) return;\r\n\r\n            if (disposing)\r\n            {\r\n");
 if (HasFlag(IDisposableGeneratorOptions.OnDisposingMethod)) { 
            this.Write("                // called on disposing the managed objects.\r\n                OnDi" +
                    "sposing();              // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ToFullName(IDisposableGeneratorOptions.OnDisposingMethod)));
            this.Write("\r\n");
 } else { 
            this.Write("                // TODO: called on disposing the managed objects.\r\n              " +
                    "  //OnDisposing();            // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ToFullName(IDisposableGeneratorOptions.OnDisposingMethod)));
            this.Write("\r\n");
 } 
            this.Write("\r\n                // dispose managed state (managed objects).\r\n                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(CompositeDisposableFieldName));
            this.Write(".Dispose();\r\n            }\r\n\r\n");
 if (HasFlag(IDisposableGeneratorOptions.DisposeUnmanagedObjectsMethod)) { 
            this.Write("            // free unmanaged resources (unmanaged objects) and override a finali" +
                    "zer below.\r\n            DisposeUnmanagedObjects();      // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ToFullName(IDisposableGeneratorOptions.DisposeUnmanagedObjectsMethod)));
            this.Write("\r\n");
 } else { 
            this.Write("            // TODO: free unmanaged resources (unmanaged objects) and override a " +
                    "finalizer below.\r\n            //DisposeUnmanagedObjects();    // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ToFullName(IDisposableGeneratorOptions.DisposeUnmanagedObjectsMethod)));
            this.Write("\r\n");
 } 
            this.Write("\r\n");
 if (HasFlag(IDisposableGeneratorOptions.SetLargeFieldsToNullMethod)) { 
            this.Write("            // set large fields to null.\r\n            SetLargeFieldsToNull();    " +
                    "     // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ToFullName(IDisposableGeneratorOptions.SetLargeFieldsToNullMethod)));
            this.Write("\r\n");
 } else { 
            this.Write("            // TODO: set large fields to null.\r\n            //SetLargeFieldsToNul" +
                    "l();       // ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ToFullName(IDisposableGeneratorOptions.SetLargeFieldsToNullMethod)));
            this.Write("\r\n");
 } 
            this.Write("\r\n            _disposedValue = true;\r\n        }\r\n\r\n");
 if (HasFlag(IDisposableGeneratorOptions.DisposeUnmanagedObjectsMethod) || HasFlag(IDisposableGeneratorOptions.SetLargeFieldsToNullMethod)) { 
            this.Write("        ~");
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            this.Write("()\r\n        {\r\n            Dispose(disposing: false);\r\n        }\r\n");
 } else { 
            this.Write("        //~");
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            this.Write("()\r\n        //{\r\n        //    Dispose(disposing: false);\r\n        //}\r\n");
 } 
            this.Write("\r\n        public void Dispose()\r\n        {\r\n            Dispose(disposing: true);" +
                    "\r\n            global::System.GC.SuppressFinalize(this);\r\n        }\r\n        \r\n");
 if (UseDefaultCompositeDisposable) { 
            this.Write("        /// <summary>Manages multiple IDisposable objects</summary>\r\n        prot" +
                    "ected sealed class SimpleCompositeDisposable : global::System.IDisposable, globa" +
                    "l::System.Collections.Generic.ICollection<global::System.IDisposable>\r\n        {" +
                    "\r\n            private readonly global::System.Collections.Generic.List<global::S" +
                    "ystem.IDisposable> _disposables = new global::System.Collections.Generic.List<gl" +
                    "obal::System.IDisposable>();\r\n            private bool _disposedValue;\r\n        " +
                    "    private readonly object _lockObject = new object();\r\n\r\n            /// <summ" +
                    "ary>Gets the enumerator of the IDisposable collection.</summary>\r\n            //" +
                    "/ <returns>IEnumerator&lt;IDisposable&gt;</returns>\r\n            public global::" +
                    "System.Collections.Generic.IEnumerator<global::System.IDisposable> GetEnumerator" +
                    "()\r\n            {\r\n                ThrowExceptionIfDisposed();\r\n                " +
                    "lock (_lockObject)\r\n                {\r\n                    return ((global::Syst" +
                    "em.Collections.Generic.IEnumerable<global::System.IDisposable>)_disposables.ToAr" +
                    "ray()).GetEnumerator();\r\n                }\r\n            }\r\n\r\n            global:" +
                    ":System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()\r\n" +
                    "            {\r\n                ThrowExceptionIfDisposed();\r\n                lock" +
                    " (_lockObject)\r\n                {\r\n                    return ((global::System.C" +
                    "ollections.Generic.IEnumerable<global::System.IDisposable>)_disposables.ToArray(" +
                    ")).GetEnumerator();\r\n                }\r\n            }\r\n\r\n            /// <summar" +
                    "y>Add an object at the end</summary>\r\n            /// <param name=\"item\">Objects" +
                    " to add</param>\r\n            public void Add(global::System.IDisposable item)\r\n " +
                    "           {\r\n                if (item is null)\r\n                    throw new g" +
                    "lobal::System.ArgumentNullException(nameof(item));\r\n\r\n                ThrowExcep" +
                    "tionIfDisposed();\r\n                lock (_lockObject)\r\n                {\r\n      " +
                    "              _disposables.Add(item);\r\n                }\r\n            }\r\n\r\n     " +
                    "       /// <summary>Delete all objects</summary>\r\n            public void Clear(" +
                    ")\r\n            {\r\n                ThrowExceptionIfDisposed();\r\n                l" +
                    "ock (_lockObject)\r\n                {\r\n                    _disposables.Clear();\r" +
                    "\n                }\r\n            }\r\n\r\n            /// <summary>Determine if an ob" +
                    "jects is included in this collection or not</summary>\r\n            /// <param na" +
                    "me=\"item\">Elements that you want to determine if they are included in the collec" +
                    "tion</param>\r\n            /// <returns>Whether or not it is included</returns>\r\n" +
                    "            public bool Contains(global::System.IDisposable item)\r\n            {" +
                    "\r\n                if (item is null)\r\n                    throw new global::Syste" +
                    "m.ArgumentNullException(nameof(item));\r\n\r\n                ThrowExceptionIfDispos" +
                    "ed();\r\n                lock (_lockObject)\r\n                {\r\n                  " +
                    "  return _disposables.Contains(item);\r\n                }\r\n            }\r\n\r\n     " +
                    "       /// <summary>\r\n            /// Copies the entire array to a compatible on" +
                    "e-dimensional array. The copy operation starts from the specified index of the d" +
                    "estination array.\r\n            /// </summary>\r\n            /// <param name=\"arra" +
                    "y\">Copy destination array</param>\r\n            /// <param name=\"arrayIndex\">Inde" +
                    "x of where in the destination array to perform the copy operation from</param>\r\n" +
                    "            public void CopyTo(global::System.IDisposable[] array, int arrayInde" +
                    "x)\r\n            {\r\n                ThrowExceptionIfDisposed();\r\n                " +
                    "lock (_lockObject)\r\n                {\r\n                    _disposables.CopyTo(a" +
                    "rray, arrayIndex);\r\n                }\r\n            }\r\n\r\n            /// <summary" +
                    ">Get the number of objects actually stored</summary>\r\n            public int Cou" +
                    "nt\r\n            {\r\n                get\r\n                {\r\n                    T" +
                    "hrowExceptionIfDisposed();\r\n                    lock (_lockObject)\r\n            " +
                    "        {\r\n                        return _disposables.Count;\r\n                 " +
                    "   }\r\n                }\r\n            }\r\n\r\n            /// <summary>Gets whether " +
                    "this collection is read-only or not. (Always returns false)</summary>\r\n         " +
                    "   public bool IsReadOnly\r\n            {\r\n                get\r\n                {" +
                    "\r\n                    ThrowExceptionIfDisposed();\r\n                    return fa" +
                    "lse;\r\n                }\r\n            }\r\n\r\n            /// <summary>Deletes the f" +
                    "irst specific object found.</summary>\r\n            /// <param name=\"item\">Object" +
                    " to be deleted</param>\r\n            /// <returns>whether it was possible to dele" +
                    "te it</returns>\r\n            public bool Remove(global::System.IDisposable item)" +
                    "\r\n            {\r\n                if (item is null)\r\n                    throw ne" +
                    "w global::System.ArgumentNullException(nameof(item));\r\n\r\n                ThrowEx" +
                    "ceptionIfDisposed();\r\n                lock (_lockObject)\r\n                {\r\n   " +
                    "                 return _disposables.Remove(item);\r\n                }\r\n         " +
                    "   }\r\n            \r\n            /// <summary>dispose method</summary>\r\n         " +
                    "   /// <param name=\"disposing\"></param>\r\n            private void Dispose(bool d" +
                    "isposing)\r\n            {\r\n                if (_disposedValue) return;\r\n\r\n       " +
                    "         if (disposing)\r\n                {\r\n                    lock (_lockObjec" +
                    "t)\r\n                    {\r\n                        _disposables.ForEach(item => " +
                    "item.Dispose());\r\n                    }\r\n                }\r\n                _dis" +
                    "posedValue = true;\r\n            }\r\n\r\n            ~SimpleCompositeDisposable()\r\n " +
                    "           {\r\n                Dispose(disposing: false);\r\n            }\r\n\r\n     " +
                    "       /// <summary>Dispose all the objects in this collection</summary>\r\n      " +
                    "      public void Dispose()\r\n            {\r\n                Dispose(disposing: t" +
                    "rue);\r\n                global::System.GC.SuppressFinalize(this);\r\n            }\r" +
                    "\n\r\n            /// <summary>throw exception if disposed</summary>\r\n            p" +
                    "rivate void ThrowExceptionIfDisposed()\r\n            {\r\n                if (_disp" +
                    "osedValue)\r\n                    throw new global::System.ObjectDisposedException" +
                    "(nameof(SimpleCompositeDisposable));\r\n            }\r\n        }\r\n");
 } 
            this.Write("    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class CodeTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
