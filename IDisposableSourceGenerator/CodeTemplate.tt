<#@ template debug="false" hostspecific="false" language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY IDISPOSABLEGENERATOR. DO NOT CHANGE IT.
// </auto-generated>
#nullable enable
using System;

<# if (!string.IsNullOrEmpty(Namespace)) { #>
namespace <#= Namespace #>
<# } #>
{
    partial class <#= ClassName #> : IDisposable
    {
        protected readonly <#= CompositeDisposableTypeName #> <#= CompositeDisposableFieldName #> = new <#= CompositeDisposableTypeName #>();
        private bool _disposedValue;

        // dispose unmanaged objects when Dispose() or finalizer is invoked.
<# if (HasFlag(IDisposableGeneratorOptions.DisposeUnmanagedObjectsMethod)) { #>
        protected virtual partial void DisposeUnmanagedObjects();   // <#= ToFullName(IDisposableGeneratorOptions.DisposeUnmanagedObjectsMethod) #>
<# } else { #>
        //protected virtual partial void DisposeUnmanagedObjects(); // <#= ToFullName(IDisposableGeneratorOptions.DisposeUnmanagedObjectsMethod) #>
<# } #>

        // set large fields to null when Dispose() or finalizer is invoked.
<# if (HasFlag(IDisposableGeneratorOptions.SetLargeFieldsToNullMethod)) { #>
        protected virtual partial void SetLargeFieldsToNull();      // <#= ToFullName(IDisposableGeneratorOptions.SetLargeFieldsToNullMethod) #>
<# } else { #>
        //protected virtual partial void SetLargeFieldsToNull();    // <#= ToFullName(IDisposableGeneratorOptions.SetLargeFieldsToNullMethod) #>
<# } #>

        // called on disposing the managed objects.
<# if (HasFlag(IDisposableGeneratorOptions.OnDisposingMethod)) { #>
        protected virtual partial void OnDisposing();               // <#= ToFullName(IDisposableGeneratorOptions.OnDisposingMethod) #>
<# } else { #>
        //protected virtual partial void OnDisposing();             // <#= ToFullName(IDisposableGeneratorOptions.OnDisposingMethod) #>
<# } #>

        protected virtual void Dispose(bool disposing)
        {
            if (_disposedValue) return;

            if (disposing)
            {
<# if (HasFlag(IDisposableGeneratorOptions.OnDisposingMethod)) { #>
                // called on disposing the managed objects.
                OnDisposing();              // <#= ToFullName(IDisposableGeneratorOptions.OnDisposingMethod) #>
<# } else { #>
                // TODO: called on disposing the managed objects.
                //OnDisposing();            // <#= ToFullName(IDisposableGeneratorOptions.OnDisposingMethod) #>
<# } #>

                // dispose managed state (managed objects).
                <#= CompositeDisposableFieldName #>.Dispose();
            }

<# if (HasFlag(IDisposableGeneratorOptions.DisposeUnmanagedObjectsMethod)) { #>
            // free unmanaged resources (unmanaged objects) and override a finalizer below.
            DisposeUnmanagedObjects();      // <#= ToFullName(IDisposableGeneratorOptions.DisposeUnmanagedObjectsMethod) #>
<# } else { #>
            // TODO: free unmanaged resources (unmanaged objects) and override a finalizer below.
            //DisposeUnmanagedObjects();    // <#= ToFullName(IDisposableGeneratorOptions.DisposeUnmanagedObjectsMethod) #>
<# } #>

<# if (HasFlag(IDisposableGeneratorOptions.SetLargeFieldsToNullMethod)) { #>
            // set large fields to null.
            SetLargeFieldsToNull();         // <#= ToFullName(IDisposableGeneratorOptions.SetLargeFieldsToNullMethod) #>
<# } else { #>
            // TODO: set large fields to null.
            //SetLargeFieldsToNull();       // <#= ToFullName(IDisposableGeneratorOptions.SetLargeFieldsToNullMethod) #>
<# } #>

            _disposedValue = true;
        }

<# if (HasFlag(IDisposableGeneratorOptions.DisposeUnmanagedObjectsMethod) || HasFlag(IDisposableGeneratorOptions.SetLargeFieldsToNullMethod)) { #>
        ~<#= ClassName #>()
        {
            Dispose(disposing: false);
        }
<# } else { #>
        //~<#= ClassName #>()
        //{
        //    Dispose(disposing: false);
        //}
<# } #>

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }
    }
}
