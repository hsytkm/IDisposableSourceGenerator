<#@ template debug="false" hostspecific="false" language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY IDISPOSABLEGENERATOR. DO NOT CHANGE IT.
// </auto-generated>
#nullable enable

<# if (!string.IsNullOrEmpty(Namespace)) { #>
namespace <#= Namespace #>
<# } #>
{
    partial class <#= ClassName #> : global::System.IDisposable
    {
        protected readonly <#= CompositeDisposableTypeName #> <#= CompositeDisposableFieldName #> = new <#= CompositeDisposableTypeName #>();
        private bool _disposedValue;

        // dispose unmanaged objects when Dispose() or finalizer is invoked.
<# if (HasFlag(IDisposableGeneratorOptions.DisposeUnmanagedObjectsMethod)) { #>
        protected virtual partial void DisposeUnmanagedObjects();   // <#= ToFullName(IDisposableGeneratorOptions.DisposeUnmanagedObjectsMethod) #>
<# } else { #>
        //protected virtual partial void DisposeUnmanagedObjects(); // <#= ToFullName(IDisposableGeneratorOptions.DisposeUnmanagedObjectsMethod) #>
<# } #>

        // set large fields to null when Dispose() or finalizer is invoked.
<# if (HasFlag(IDisposableGeneratorOptions.SetLargeFieldsToNullMethod)) { #>
        protected virtual partial void SetLargeFieldsToNull();      // <#= ToFullName(IDisposableGeneratorOptions.SetLargeFieldsToNullMethod) #>
<# } else { #>
        //protected virtual partial void SetLargeFieldsToNull();    // <#= ToFullName(IDisposableGeneratorOptions.SetLargeFieldsToNullMethod) #>
<# } #>

        // called on disposing the managed objects.
<# if (HasFlag(IDisposableGeneratorOptions.OnDisposingMethod)) { #>
        protected virtual partial void OnDisposing();               // <#= ToFullName(IDisposableGeneratorOptions.OnDisposingMethod) #>
<# } else { #>
        //protected virtual partial void OnDisposing();             // <#= ToFullName(IDisposableGeneratorOptions.OnDisposingMethod) #>
<# } #>

        protected virtual void Dispose(bool disposing)
        {
            if (_disposedValue) return;

            if (disposing)
            {
<# if (HasFlag(IDisposableGeneratorOptions.OnDisposingMethod)) { #>
                // called on disposing the managed objects.
                OnDisposing();              // <#= ToFullName(IDisposableGeneratorOptions.OnDisposingMethod) #>
<# } else { #>
                // TODO: called on disposing the managed objects.
                //OnDisposing();            // <#= ToFullName(IDisposableGeneratorOptions.OnDisposingMethod) #>
<# } #>

                // dispose managed state (managed objects).
                <#= CompositeDisposableFieldName #>.Dispose();
            }

<# if (HasFlag(IDisposableGeneratorOptions.DisposeUnmanagedObjectsMethod)) { #>
            // free unmanaged resources (unmanaged objects) and override a finalizer below.
            DisposeUnmanagedObjects();      // <#= ToFullName(IDisposableGeneratorOptions.DisposeUnmanagedObjectsMethod) #>
<# } else { #>
            // TODO: free unmanaged resources (unmanaged objects) and override a finalizer below.
            //DisposeUnmanagedObjects();    // <#= ToFullName(IDisposableGeneratorOptions.DisposeUnmanagedObjectsMethod) #>
<# } #>

<# if (HasFlag(IDisposableGeneratorOptions.SetLargeFieldsToNullMethod)) { #>
            // set large fields to null.
            SetLargeFieldsToNull();         // <#= ToFullName(IDisposableGeneratorOptions.SetLargeFieldsToNullMethod) #>
<# } else { #>
            // TODO: set large fields to null.
            //SetLargeFieldsToNull();       // <#= ToFullName(IDisposableGeneratorOptions.SetLargeFieldsToNullMethod) #>
<# } #>

            _disposedValue = true;
        }

<# if (HasFlag(IDisposableGeneratorOptions.DisposeUnmanagedObjectsMethod) || HasFlag(IDisposableGeneratorOptions.SetLargeFieldsToNullMethod)) { #>
        ~<#= ClassName #>()
        {
            Dispose(disposing: false);
        }
<# } else { #>
        //~<#= ClassName #>()
        //{
        //    Dispose(disposing: false);
        //}
<# } #>

        public void Dispose()
        {
            Dispose(disposing: true);
            global::System.GC.SuppressFinalize(this);
        }
        
<# if (UseDefaultCompositeDisposable) { #>
        /// <summary>Manages multiple IDisposable objects</summary>
        protected sealed class SimpleCompositeDisposable : global::System.IDisposable, global::System.Collections.Generic.ICollection<global::System.IDisposable>
        {
            private readonly global::System.Collections.Generic.List<global::System.IDisposable> _disposables = new global::System.Collections.Generic.List<global::System.IDisposable>();
            private bool _disposedValue;
            private readonly object _lockObject = new object();

            /// <summary>Gets the enumerator of the IDisposable collection.</summary>
            /// <returns>IEnumerator&lt;IDisposable&gt;</returns>
            public global::System.Collections.Generic.IEnumerator<global::System.IDisposable> GetEnumerator()
            {
                ThrowExceptionIfDisposed();
                lock (_lockObject)
                {
                    return ((global::System.Collections.Generic.IEnumerable<global::System.IDisposable>)_disposables.ToArray()).GetEnumerator();
                }
            }

            global::System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
            {
                ThrowExceptionIfDisposed();
                lock (_lockObject)
                {
                    return ((global::System.Collections.Generic.IEnumerable<global::System.IDisposable>)_disposables.ToArray()).GetEnumerator();
                }
            }

            /// <summary>Add an object at the end</summary>
            /// <param name="item">Objects to add</param>
            public void Add(global::System.IDisposable item)
            {
                if (item is null)
                    throw new global::System.ArgumentNullException(nameof(item));

                ThrowExceptionIfDisposed();
                lock (_lockObject)
                {
                    _disposables.Add(item);
                }
            }

            /// <summary>Delete all objects</summary>
            public void Clear()
            {
                ThrowExceptionIfDisposed();
                lock (_lockObject)
                {
                    _disposables.Clear();
                }
            }

            /// <summary>Determine if an objects is included in this collection or not</summary>
            /// <param name="item">Elements that you want to determine if they are included in the collection</param>
            /// <returns>Whether or not it is included</returns>
            public bool Contains(global::System.IDisposable item)
            {
                if (item is null)
                    throw new global::System.ArgumentNullException(nameof(item));

                ThrowExceptionIfDisposed();
                lock (_lockObject)
                {
                    return _disposables.Contains(item);
                }
            }

            /// <summary>
            /// Copies the entire array to a compatible one-dimensional array. The copy operation starts from the specified index of the destination array.
            /// </summary>
            /// <param name="array">Copy destination array</param>
            /// <param name="arrayIndex">Index of where in the destination array to perform the copy operation from</param>
            public void CopyTo(global::System.IDisposable[] array, int arrayIndex)
            {
                ThrowExceptionIfDisposed();
                lock (_lockObject)
                {
                    _disposables.CopyTo(array, arrayIndex);
                }
            }

            /// <summary>Get the number of objects actually stored</summary>
            public int Count
            {
                get
                {
                    ThrowExceptionIfDisposed();
                    lock (_lockObject)
                    {
                        return _disposables.Count;
                    }
                }
            }

            /// <summary>Gets whether this collection is read-only or not. (Always returns false)</summary>
            public bool IsReadOnly
            {
                get
                {
                    ThrowExceptionIfDisposed();
                    return false;
                }
            }

            /// <summary>Deletes the first specific object found.</summary>
            /// <param name="item">Object to be deleted</param>
            /// <returns>whether it was possible to delete it</returns>
            public bool Remove(global::System.IDisposable item)
            {
                if (item is null)
                    throw new global::System.ArgumentNullException(nameof(item));

                ThrowExceptionIfDisposed();
                lock (_lockObject)
                {
                    return _disposables.Remove(item);
                }
            }
            
            /// <summary>dispose method</summary>
            /// <param name="disposing"></param>
            private void Dispose(bool disposing)
            {
                if (_disposedValue) return;

                if (disposing)
                {
                    lock (_lockObject)
                    {
                        _disposables.ForEach(item => item.Dispose());
                    }
                }
                _disposedValue = true;
            }

            ~SimpleCompositeDisposable()
            {
                Dispose(disposing: false);
            }

            /// <summary>Dispose all the objects in this collection</summary>
            public void Dispose()
            {
                Dispose(disposing: true);
                global::System.GC.SuppressFinalize(this);
            }

            /// <summary>throw exception if disposed</summary>
            private void ThrowExceptionIfDisposed()
            {
                if (_disposedValue)
                    throw new global::System.ObjectDisposedException(nameof(SimpleCompositeDisposable));
            }
        }
<# } #>
    }
}
