<#@ template debug="false" hostspecific="false" language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY IDISPOSABLEGENERATOR. DO NOT CHANGE IT.
// </auto-generated>
#nullable enable
using System;

<# if (!string.IsNullOrEmpty(Namespace)) { #>
namespace <#= Namespace #>
<# } #>
{
    partial class <#= ClassName #> : System.IDisposable
    {
        internal readonly IDisposableSourceGenerator.CompositeDisposable _disposables = new();
        private bool _disposedValue = false;

<# if (HasFlag(IDisposableGeneratorOptions.DisposeManagedObjectsMethod)) { #>
        protected virtual partial void DisposeManagedObjects();     //IDisposableGeneratorOptions.DisposeManagedObjectsMethod
<# } else { #>
        //protected virtual partial void DisposeManagedObjects();   //IDisposableGeneratorOptions.DisposeManagedObjectsMethod
<# } #>
<# if (HasFlag(IDisposableGeneratorOptions.DisposeUnmanagedObjectsMethod)) { #>
        protected virtual partial void DisposeUnmanagedObjects();   //IDisposableGeneratorOptions.DisposeUnmanagedObjectsMethod
<# } else { #>
        //protected virtual partial void DisposeUnmanagedObjects(); //IDisposableGeneratorOptions.DisposeUnmanagedObjectsMethod
<# } #>
<# if (HasFlag(IDisposableGeneratorOptions.SetLargeFieldsToNullMethod)) { #>
        protected virtual partial void SetLargeFieldsToNull();      //IDisposableGeneratorOptions.SetLargeFieldsToNullMethod
<# } else { #>
        //protected virtual partial void SetLargeFieldsToNull();    //IDisposableGeneratorOptions.SetLargeFieldsToNullMethod
<# } #>

        protected virtual void Dispose(bool disposing)
        {
            if (_disposedValue) return;

            if (disposing)
            {
                // TODO: dispose managed state (managed objects).
                // TODO: マネージド状態を破棄します (マネージド オブジェクト)
<# if (HasFlag(IDisposableGeneratorOptions.DisposeManagedObjectsMethod)) { #>
                DisposeManagedObjects();
<# } else { #>
                //DisposeManagedObjects();
<# } #>

                _disposables.Dispose();
            }

            // TODO: free unmanaged resources (unmanaged objects) and override a finalizer below.
            // TODO: アンマネージド リソース (アンマネージド オブジェクト) を解放し、ファイナライザーをオーバーライドします
<# if (HasFlag(IDisposableGeneratorOptions.DisposeUnmanagedObjectsMethod)) { #>
            DisposeUnmanagedObjects();
<# } else { #>
            //DisposeUnmanagedObjects();
<# } #>

            // TODO: set large fields to null.
            // TODO: 大きなフィールドを null に設定します
<# if (HasFlag(IDisposableGeneratorOptions.SetLargeFieldsToNullMethod)) { #>
            SetLargeFieldsToNull();
<# } else { #>
            //SetLargeFieldsToNull();
<# } #>

            _disposedValue = true;
        }

<# if (HasFlag(IDisposableGeneratorOptions.DisposeUnmanagedObjectsMethod) || HasFlag(IDisposableGeneratorOptions.SetLargeFieldsToNullMethod)) { #>
        // TODO: 'Dispose(bool disposing)' にアンマネージド リソースを解放するコードが含まれる場合にのみ、ファイナライザーをオーバーライドします
        ~<#= ClassName #>()
        {
            Dispose(disposing: false);
        }
<# } else { #>
        // // TODO: 'Dispose(bool disposing)' にアンマネージド リソースを解放するコードが含まれる場合にのみ、ファイナライザーをオーバーライドします
        // ~<#= ClassName #>()
        // {
        //     Dispose(disposing: false);
        // }
<# } #>

        public void Dispose()
        {
            Dispose(disposing: true);
            System.GC.SuppressFinalize(this);
        }
    }
}
