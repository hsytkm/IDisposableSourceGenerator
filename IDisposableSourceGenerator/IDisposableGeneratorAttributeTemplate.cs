// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 16.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace IDisposableSourceGenerator
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class IDisposableGeneratorAttributeTemplate : IDisposableGeneratorAttributeTemplateBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("// <auto-generated>\r\n// THIS (.cs) FILE IS GENERATED BY IDISPOSABLEGENERATOR. DO " +
                    "NOT CHANGE IT.\r\n// </auto-generated>\r\n#nullable enable\r\nusing System;\r\nusing Sys" +
                    "tem.Collections.Generic;\r\n\r\nnamespace IDisposableSourceGenerator\r\n{\r\n    [Attrib" +
                    "uteUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)]\r\n   " +
                    " internal sealed class IDisposableGeneratorAttribute : Attribute\r\n    {\r\n       " +
                    " public IDisposableGeneratorOptions Options { get; }\r\n        public string Comp" +
                    "ositeDisposableFieldName { get; }\r\n\r\n        public IDisposableGeneratorAttribut" +
                    "e(IDisposableGeneratorOptions options = IDisposableGeneratorOptions.None, string" +
                    " compositeDisposableFieldName = \"_disposables\")\r\n        {\r\n            this.Opt" +
                    "ions = options;\r\n            this.CompositeDisposableFieldName = compositeDispos" +
                    "ableFieldName;\r\n        }\r\n    }\r\n\r\n    [Flags]\r\n    internal enum IDisposableGe" +
                    "neratorOptions\r\n    {\r\n        None = 0x0000,\r\n        DisposeUnmanagedObjectsMe" +
                    "thod = 0x0001,\r\n        SetLargeFieldsToNullMethod = 0x0002,\r\n    }\r\n\r\n    /// <" +
                    "summary>\r\n    /// 複数の IDisposable オブジェクトをまとめて管理します。\r\n    /// </summary>\r\n    int" +
                    "ernal class CompositeDisposable : IDisposable, ICollection<IDisposable>\r\n    {\r\n" +
                    "        private readonly List<IDisposable> _disposables = new();\r\n        privat" +
                    "e bool _disposed;\r\n        private readonly object _lockObject = new();\r\n\r\n     " +
                    "   /// <summary>\r\n        /// IDisposableコレクションの列挙子を取得します。\r\n        /// </summar" +
                    "y>\r\n        /// <returns>IDisposableコレクションの列挙子</returns>\r\n        public IEnumer" +
                    "ator<IDisposable> GetEnumerator()\r\n        {\r\n            ThrowExceptionIfDispos" +
                    "ed();\r\n            lock (_lockObject)\r\n            {\r\n                return ((I" +
                    "Enumerable<IDisposable>)_disposables.ToArray()).GetEnumerator();\r\n            }\r" +
                    "\n        }\r\n\r\n        System.Collections.IEnumerator System.Collections.IEnumera" +
                    "ble.GetEnumerator()\r\n        {\r\n            ThrowExceptionIfDisposed();\r\n       " +
                    "     lock (_lockObject)\r\n            {\r\n                return ((IEnumerable<IDi" +
                    "sposable>)_disposables.ToArray()).GetEnumerator();\r\n            }\r\n        }\r\n\r\n" +
                    "        /// <summary>\r\n        /// 末尾にオブジェクトを追加します。\r\n        /// </summary>\r\n   " +
                    "     /// <param name=\"item\">追加するオブジェクト</param>\r\n        public void Add(IDisposa" +
                    "ble item)\r\n        {\r\n            if (item is null) throw new ArgumentNullExcept" +
                    "ion(nameof(item));\r\n\r\n            ThrowExceptionIfDisposed();\r\n            lock " +
                    "(_lockObject)\r\n            {\r\n                _disposables.Add(item);\r\n         " +
                    "   }\r\n        }\r\n\r\n        /// <summary>\r\n        /// すべての要素を削除します。\r\n        ///" +
                    " </summary>\r\n        public void Clear()\r\n        {\r\n            ThrowExceptionI" +
                    "fDisposed();\r\n            lock (_lockObject)\r\n            {\r\n                _di" +
                    "sposables.Clear();\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /" +
                    "// ある要素がこのコレクションに含まれているかどうかを判断します。\r\n        /// </summary>\r\n        /// <param n" +
                    "ame=\"item\">コレクションに含まれているか判断したい要素</param>\r\n        /// <returns>このコレクションに含まれているかど" +
                    "うか</returns>\r\n        public bool Contains(IDisposable item)\r\n        {\r\n       " +
                    "     if (item is null) throw new ArgumentNullException(nameof(item));\r\n\r\n       " +
                    "     ThrowExceptionIfDisposed();\r\n            lock (_lockObject)\r\n            {\r" +
                    "\n                return _disposables.Contains(item);\r\n            }\r\n        }\r\n" +
                    "\r\n        /// <summary>\r\n        /// 全体を互換性のある1次元の配列にコピーします。コピー操作は、コピー先の配列の指定したイ" +
                    "ンデックスから始まります。\r\n        /// </summary>\r\n        /// <param name=\"array\">コピー先の配列</" +
                    "param>\r\n        /// <param name=\"arrayIndex\">コピー先の配列のどこからコピー操作をするかのインデックス</param" +
                    ">\r\n        public void CopyTo(IDisposable[] array, int arrayIndex)\r\n        {\r\n " +
                    "           ThrowExceptionIfDisposed();\r\n            lock (_lockObject)\r\n        " +
                    "    {\r\n                _disposables.CopyTo(array, arrayIndex);\r\n            }\r\n " +
                    "       }\r\n\r\n        /// <summary>\r\n        /// 実際に格納されている要素の数を取得します。\r\n        //" +
                    "/ </summary>\r\n        public int Count\r\n        {\r\n            get\r\n            " +
                    "{\r\n                ThrowExceptionIfDisposed();\r\n                lock (_lockObjec" +
                    "t)\r\n                {\r\n                    return _disposables.Count;\r\n         " +
                    "       }\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// このコレクショ" +
                    "ンが読み取り専用かどうかを取得します。(常にfalseを返します)\r\n        /// </summary>\r\n        public bool I" +
                    "sReadOnly\r\n        {\r\n            get\r\n            {\r\n                ThrowExcep" +
                    "tionIfDisposed();\r\n                return false;\r\n            }\r\n        }\r\n\r\n  " +
                    "      /// <summary>\r\n        /// 最初に見つかった特定のオブジェクトを削除します。\r\n        /// </summary" +
                    ">\r\n        /// <param name=\"item\">削除したいオブジェクト</param>\r\n        /// <returns>削除でき" +
                    "たかどうか</returns>\r\n        public bool Remove(IDisposable item)\r\n        {\r\n      " +
                    "      if (item is null) throw new ArgumentNullException(nameof(item));\r\n\r\n      " +
                    "      ThrowExceptionIfDisposed();\r\n\r\n            lock (_lockObject)\r\n           " +
                    " {\r\n                return _disposables.Remove(item);\r\n            }\r\n        }\r" +
                    "\n\r\n        /// <summary>\r\n        /// このコレクションに含まれるすべての要素をDisposeします。\r\n        /" +
                    "// </summary>\r\n        public void Dispose()\r\n        {\r\n            Dispose(dis" +
                    "posing: true);\r\n            GC.SuppressFinalize(this);\r\n        }\r\n\r\n        pro" +
                    "tected virtual void Dispose(bool disposing)\r\n        {\r\n            if (_dispose" +
                    "d) return;\r\n\r\n            if (disposing)\r\n            {\r\n                lock (_" +
                    "lockObject)\r\n                {\r\n                    _disposables.ForEach(item =>" +
                    " item.Dispose());\r\n                }\r\n            }\r\n            _disposed = tru" +
                    "e;\r\n        }\r\n\r\n        protected void ThrowExceptionIfDisposed()\r\n        {\r\n " +
                    "           if (_disposed)\r\n                throw new ObjectDisposedException(nam" +
                    "eof(CompositeDisposable));\r\n        }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class IDisposableGeneratorAttributeTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
